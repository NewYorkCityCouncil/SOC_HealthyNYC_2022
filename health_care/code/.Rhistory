y = "Number of Approved Kiosks",
fill = "Installation Status",
caption = "Data source: Approved Link NYC Kiosk Locations (Last Updated: April 12, 2022)") +
theme_minimal()
plot(boro_shp)
View(boro_shp)
plot(st_geometry(boro_shp))
library(ggplot2)
ggplot(data = boro_shp) +
geom_sf()
ggplot(data = st_geometry(boro_shp)) +
geom_sf()
ggplot(data = st_geometry(boro_shp)) +
geom_sf() +
geom_label(aes(X, Y, label = boro_name), size = 5, fontface = "bold")
ggplot(data = st_geometry(boro_shp)) +
geom_sf() +
geom_label(aes(longitude, latitude, label = boro_name), size = 5, fontface = "bold")
test <- st_geometry(boro_shp)
View(test)
ggplot(data = boro_shp) +
geom_sf() +
geom_label(aes(longitude, latitude, label = boro_name), size = 5, fontface = "bold")
View(linkpermit_df)
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = linkpermit_df, aes(x = longitude, y = latitude))
?geom_sf
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = linkpermit_df)
# create a points collection
pnts_sf <- do.call("st_sfc",c(lapply(1:nrow(pnts),
function(i) {st_point(as.numeric(pnts[i, ]))}), list("crs" = 4326)))
# Of the ones that have been approved, what are the timetables?
pnts <- linkpermit_df %>%
select(longitude,latitude)
# create a points collection
pnts_sf <- do.call("st_sfc",c(lapply(1:nrow(pnts),
function(i) {st_point(as.numeric(pnts[i, ]))}), list("crs" = 4326)))
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts_sf)
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts_sf, size = .5)
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts_sf, size = .5) +
theme_minimal()
pnts_trans <- st_transform(pnts_sf, 2163) # apply transformation to pnts sf
tt1_trans <- st_transform(boro_shp, 2163)
ggplot(data = tt1_trans) +
geom_sf() +
geom_sf(data = pnts_trans, size = .5) +
theme_minimal()
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts_sf, size = .5) +
theme_minimal()
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts_sf, size = .25, color = "green") +
theme_minimal()
boro_applied +
geom_bar() +
geom_text(aes(label=..count..),stat="count",size = 3, position = position_stack(vjust = 0.5), colour = "white") +
labs(title = "LinkNYC Permit: Applications (by boro)",
x = "Boro",
y = "Number of Applications",
caption = "Data source: LinkNYC New Site Permit Applications (Last Updated: April 22, 2022)") +
theme_minimal()
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts_sf, size = .25, color = "green") +
theme_minimal()
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts, size = .25, color = "green") +
theme_minimal()
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = st_geometry(pnts), size = .25, color = "green") +
theme_minimal()
# create a points collection
pnts_sf <- do.call("st_sfc",c(lapply(1:nrow(pnts),
function(i) {st_point(as.numeric(pnts[i, ]))})))
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts_sf, size = .25, color = "green") +
theme_minimal()
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts_sf, size = .25, color = "green") +
theme_minimal()
# create a points collection
pnts_sf <- do.call("st_sfc",c(lapply(1:nrow(pnts),
function(i) {st_point(as.numeric(pnts[i, ]))}), list("crs" = 4326)))
ggplot(data = boro_shp) +
geom_sf() +
geom_sf(data = pnts_sf, size = .25, color = "green") +
theme_minimal()
View(linkpermit_df)
approved_df %>% group_by(installation_status) %>% summarise(count = n)
approved_df %>% group_by(installation_status) %>% summarise(count = n())
180/291
approved_df %>% group_by(installation_status) %>% summarise(count = n()) %>% arrange(desc(count)) %>% mutate(percent = count / nrow(approved_df))
approved_df %>% group_by(installation_status) %>% summarise(count = n()) %>% arrange(desc(count)) %>% mutate(percent = count / nrow(approved_df)) %>% write.csv("table.csv")
get_wd()
getwd()
boro_approved +
geom_bar(position="stack") +
geom_text(aes(label=..count..),stat="count",size = 3, position = position_stack(vjust = 0.5), colour = "white") +
labs(title = "LinkNYC: Installation Status of Approved Kiosks (by boro)",
x = "Boro",
y = "Number of Approved Kiosks",
fill = "Installation Status",
caption = "Data source: Approved Link NYC Kiosk Locations (Last Updated: April 12, 2022)") +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
axis.title.x = element_text(color="black",size = 12),
axis.title.y = element_text(color="black",size = 12),
plot.title = element_text(family = "Georgia",size = 16)
)
boro_applied +
geom_bar() +
geom_text(aes(label=..count..),stat="count",size = 3, position = position_stack(vjust = 0.5), colour = "white") +
labs(title = "LinkNYC Permit: Applications (by boro)",
x = "Boro",
y = "Number of Applications",
caption = "Data source: LinkNYC New Site Permit Applications (Last Updated: April 22, 2022)") +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
axis.title.x = element_text(color="black",size = 12),
axis.title.y = element_text(color="black",size = 12),
plot.title = element_text(family = "Georgia",size = 16)
)
library(reticulate)
install.packages("reticulate")
library(reticulate)
# which python version do I have? python path?
Sys.which("python")
py_discover_config()
Y
py_config()
py_available()
conda_list()
miniconda_path()
# create environment
virtualenv_create("test")
virtualenv_list()
use_virtualenv("test")
virtualenv_remove("test")
Y
rm(list=ls())
library(RSelenium)
remDr <- RSelenium::remoteDriver(remoteServerAddr = "localhost",
port = 4445L,
browserName = "chrome")
# Setup
system("docker run -d --shm-size=2g -p 4445:4444 selenium/standalone-chrome",wait=T)
remDr$open()
URL <- "https://my.nycha.info/Outages/Outages.aspx#tab_history"
t <- remDr$executeScript("return window.performance.getEntries();")
View(t)
URL <- "https://outagemap.coned.com/external/default.html"
remDr$navigate(URL)
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
View(t)
for(i in 1:length(t)){t[[i]]$name}
t[[1]]
t[[1]]$name
for(i in 1:length(t)){return(t[[i]]$name)}
for(i in 1:length(t)) {return(t[[i]]$name)}
for(i in 1:length(t)) {print(t[[i]]$name)}
lapply(t,function(x) x$name)
t <- remDr$executeScript("return window.performance.getEntriesByName();")
View(t)
remDr$open()
URL <- "https://outagemap.coned.com/external/default.html"
remDr$navigate(URL)
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntriesByName();")
t <- remDr$executeScript("return window.performance.getEntries();")
View(t)
t_names <- lapply(t, function(x) x$name)
View(t_names)
t_names <- lapply(t, function(x) x$name) %>% unlist
t_names
View(t)
library("jsonlite")
test <- fromJSON(t_names[82])
t_names[82]
test <- fromJSON(t_names[81])
test <- fromJSON(t_names[80])
test <- fromJSON(t_names[76])
test <- fromJSON(t_names[77])
test <- fromJSON(t_names[78])
View(test)
View(test)
View(t)
library(pipeR)
install.packages("pipeR")
library(rlist)
install.packages("rlist")
library(rlist)
library(pipeR)
grepl("hello","helloitsme")
t %>>%
list.filter(grepl("interval_generation_data",.))
?list.filter
View(t)
t %>>%
list.filter(grepl("interval_generation_data",name))
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data",name))
View(potential_jsons)
View(potential_jsons)
lapply(potential_jsons)
lapply(potential_jsons,function(x) x$name)
fromJSON(potential_jsons[2])
fromJSON(potential_jsons[[2]])
potential_jsons[[2]]
fromJSON(potential_jsons[[2]]$name)
lapply(potential_jsons,function(x) x$name)
potential_jsons <- t %>>%
list.filter(grepl("outages",name))
View(potential_jsons)
lapply(potential_jsons,function(x) x$name)
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name))
lapply(potential_jsons,function(x) x$name)
outage_list <- lapply(potential_jsons,function(x) fromJSON(x))
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity))
View(outage_list)
rm(t_names)
rm(test)
remDr$open()
URL <- "https://outagemap.coned.com/external/default.html"
remDr$navigate(URL)
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name))
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity))
View(outage_list)
View(potential_jsons)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x$name)
}, error=identity))
View(outage_list)
remDr$navigate(URL)
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name))
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x$name)
}, error=identity))
View(outage_list)
test <- as.data.frame(t)
test <- unlist(t)
t %>>%
unlist %>>%
grep("interval_generation_data.*outages",name)
t %>>%
unlist %>>%
grep("interval_generation_data.*outages",.)
t %>>%
unlist %>>%
grepl("interval_generation_data.*outages",.)
test
?list.mapv
t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name) %>%
unique
View(outage_list)
View(outage_list)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>%
list.filter(!inherits(x, "simpleError"))
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>%
list.filter(!inherits(., "simpleError"))
View(outage_list)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError"))
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity))
View(outage_list)
remDr$open()
remDr$navigate(URL)
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError"))
View(outage_list)
identical(outage_list[[2]],outage_list[[4]])
identical(outage_list[[2]],outage_list[[3]])
unique(outage_list)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(outage_list)
# Try zooming in and seeing what results
remDr$findElement(using = "id", value = "btn-zoom-in")
# Try zooming in and seeing what results
remDr$findElement(using = "id", value = "btn-zoom-in")$clickElement()
remDr$open()
remDr$navigate(URL)
remDr$screenshot(display=TRUE)
# Try zooming in and seeing what results
remDr$findElement(using = "id", value = "btn-zoom-in")$clickElement()
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(outage_list)
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(outage_list)
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(outage_list)
outage_list[[11]]
lapply(outage_list, function(x) x$file_data)
lapply(outage_list, function(x) x$file_data) %>%
bind_rows()
View(lapply(outage_list, function(x) x$file_data) %>%
bind_rows())
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(lapply(outage_list, function(x) x$file_data) %>%
bind_rows())
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(lapply(outage_list, function(x) x$file_data) %>%
bind_rows())
View(lapply(outage_list, function(x) x$file_data) %>%
bind_rows() %>%
unique)
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(lapply(outage_list, function(x) x$file_data) %>%
bind_rows)
remDr$open()
remDr$navigate(URL)
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(outage_list)
View(lapply(outage_list, function(x) x$file_data) %>%
bind_rows)
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
t <- remDr$executeScript("return window.performance.getEntries();")
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(lapply(outage_list, function(x) x$file_data) %>%
bind_rows)
# Try zooming in and seeing what results
remDr$findElement(using = 'xpath', value = '//*[@id="btn-zoom-in"]')$clickElement()
remDr$screenshot(display=TRUE)
potential_jsons <- t %>>%
list.filter(grepl("interval_generation_data.*outages",name)) %>>%
list.mapv(name)
outage_list <- lapply(potential_jsons,function(x) tryCatch({
fromJSON(x)
}, error=identity)) %>>%
list.filter(!inherits(., "simpleError")) %>%
unique
View(lapply(outage_list, function(x) x$file_data) %>%
bind_rows)
rm(list=ls())
n_df <- read.csv("w.csv")
setwd("~/Desktop/JWu Projects/SOC_HealthyNYC_2022/health_care/code")
library(dplyr)
library(ggplot2)
n_df <- read.csv("w.csv")
ggplot(data = n_df) +
geom_point(aes(x = perc_overlap_area * 100,
y = med_income,
color = BoroName))
ggplot(data = n_df %>%
filter(BoroName != "Manhattan")) +
geom_point(aes(x = perc_overlap_area * 100,
y = med_income,
color = BoroName))
library(crosstalk)
library(plotly)
View(n_df)
ggplot(data = n_df) +
geom_point(aes(x = perc_overlap_area * 100,
y = med_income)) +
facet_wrap(~.BoroName)
ggplot(data = n_df) +
geom_point(aes(x = perc_overlap_area * 100,
y = med_income)) +
facet_wrap(.~BoroName)
# Wrap data frame in SharedData
sd = SharedData$new(n_df)
